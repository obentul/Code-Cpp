字节：计算机可寻址的最小内存块。
字：由多个字节组成，计算机存储的基本单位。

32位操作系统，一个字是4个字节，64为操作系统，一个字是8个字节。

（*）一个字节对应一个内存地址。

如果0x736424位置存储了一个float类型，又当前操作系统是32位的(float占4个字节)，那么0x736424~0x736427这三个字节用来存储指定
的float数据。

extern int i;	//仅仅声明了i, 不能 extern int i=0,这样做会报错
int j;			//定义了j

（*）变量只能被定义一次，但是可以被多次声明

（*）引用不是一个对象，即引用不占内存，或者说引用不是变量，在内存中不存在，可以理解为引用就是附着在被引用变量“身上”的一个标签，
所以也会有对引用求地址时，会得到被引用变量的地址值。

复杂变量的解读-->从右向左，最靠近变量名的那个符号即是变量的真实属性。
int *&r = p;    //定义了一个引用，这个引用指向p，p应当是一个int指针(int *)，所以这个定义可以理解为，为int类型指针p创建一个标签，这个标签叫做r

const修饰的变量，默认只在本文件中有效。和全局变量一样。如果想在其他文件中使用，则用extern即可。
	（ps：这里也体现了extern的声明属性，extern修饰的语句不会向内存申请空间，仅仅是说明当前这个变量在其他文件中定义了，相当于把变量的符号引入到此处）
	
1）const变量，如果在定义时就初始化指定值，那么它将被在编译时就替换其出现的所有位置，可以类比为”宏“。
2）如果使用某个变量的值来初始化，那么应该也是先使用变量的值来初始化，然后在替换，但是要求变量必须被初始化指定值，
否则就违反了”const 定义就必须初始化的要求“，接着也被当做”宏“来使用
	

如果某个变量是const的，那么它的引用必须是const的。表示当前标签贴在一个const类型的变量上
比如
const int i = 1024;
const int &j = i;


int i = 10;
int &r_i = i;		//可以对r_i读写，写会影响i
const int &cr_i = i;	//合法，但是只能对cr_i读

const的约束性更强，const的指针和引用都可以作用在非const变量身上。但是会出现警告


（*）是否使用const约束，表示了当前变量的能力，那么可读可写的变量无法作用于只可读不可写的变量。
但是只可读不可写的变量可以作用于可读可写的变量上。

错误：  const int i = 1;
	int *p_i = &i;
原因：  p_i是可读可写的，代表p_i对于作用的变量具备读写能力，但是如果把i给p_i，则暗示p_i能够读写i，这明显错误

正确(警告)：  int i = 1;
	      const int *p_i = &i;

(!)同理，引用也和指针有着同样的特性。


指针可以用const修饰为常指针，但是引用不能用const修饰。
原因：1）指针是实实在在存在于内存中的，是“对象”，引用是内存中某个变量的标签，不是对象
      2）非const指针可以切换自己的指向，引用只能在定义时就 “附着” 在指定的变量身上，不能改变，故可以理解为就是const的。


从右向左
const int * p;		//p是指针，指向const int
int const* p;		//p是const指针，仅指向某个int
int *const p;		//同上
const int const* p;	//p是const指针，仅指向某个cosnt int
const int *const p;	//同上
(!)   const* 和 *const 等价
	
	
constexpr 表示在编译期就求值。
-----------------------

#define PI 3.14;
constexpr int Inc(int i){
   return i+1;
}
int func(int i){
   return i+1;
}
constexpr int a = 10;
constexpr int a = sizeof(int);
constexpr int a = Inc(1);
constexpr int a = PI;
上述a都是合法的，因为在编译时constexpr就会被计算和展开，所以上述a都可以获得值
constexpr int b = func(1);
constexpr int b = Inc(cin.get());
上述b都是不合法的，因为在编译时无法获得值，其中func不是constexpr的，所以无法再编译时计算，cin.get()需要在运行时获取值，也不行

------------------------


处理类型











