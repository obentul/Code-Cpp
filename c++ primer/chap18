#1 =======================================================================================

异常处理

#2 =======================================================================================

命名空间

命名空间是用来定义一个作用域，可以把 函数/类/全局变量 等等都放进去，然后它们就具备同一个作用域
，其实也就是变得不再是全局的，而是在命名空间内全局。

可以理解为，把原来的全局作用域进行了子集划分。

如果有 namespace A {
			
			class A;			//声明一个类A
			class B;			//声明一个类B
			void func(A);		//声明一个函数func
			A a;				//声明一个全局变量a
	   }
	   
如果我再 进行 namespace A{
				  class C;		//声明一个类C
			  }
			  
那么这相当于把 类 C添加到作用域A 中，因为A已经定义过了。相反，如果A没有被定义过，那么上述语句
相当于定义一个新的作用域。即  “作用域的定义具备追加属性”

上面描述的为 “命名空间的不连续性”，正是这种不连续性，使得我们可以在 一些文件中进行声明，在另外
一些文件中进行实现。即：

nameA.h

namespace A{

	class A;
	void func(A);
	A a;

}

nameA.cpp

namespace A{

	class A{
		...		//类A的实现
	}
	void func(A){
		...		//函数func的实现
	}

}

#3 =======================================================================================

不能把include语句放到namespace中，这会导致命名空间互相污染，因为某些头文件中可能就包含
命名空间的定义，如果被include的话，就会导致命名空间的嵌套

#4 =======================================================================================

和类的实现一样，可以使用命名空间的前缀来修饰  变量/函数，以此来标识其属于哪个命名空间。

需要注意，不能在其他命名空间中试图通过命名空间修饰来定义另一个命名空间的内容，比如：

namaspace A{

	B::void func(){	//试图在A的命名空间中定义一个命名空间为B的函数func
	    ...
	}

}

只能在全局作用域 或者 自己的命名空间 中  “定义”  自己的空间成员。注意，这里是 “定义”，声明
还是可以的，毕竟很多时候都需要在一个命名空间中使用另一个命名空间中的成员，比如std

#5 =======================================================================================

C++为了把命名空间的概念统一化，引入了全局命名空间，即全局作用域在c++中也是一个命名空间，可以
使用 ::func()  这样来直接访问，即不加命名空间名字

#6 =======================================================================================

嵌套命名空间

namespace A{

	int a;				//a1

	namespace A1{
		int a;			//a2
	}

}

A::a   			访问的是a1
A::A1::a1		访问的是a2

和作用域一样，存在“就近原则”

#7 =======================================================================================

c++中不使用static来限制变量只能在当前文件中被访问，而是使用未命名的名称空间来包裹所有被
希望定义为static的变量，以此来限定这些变量仅在当前文件中有效。

如果未命名名称空间存在于头文件中，那么所有inclue这个头文件的文件都将会获得一份只属于自己的
未命名名称空间副本，且他们之间毫无联系。因为他们都是在自己所属的文件中才可见

现在如果在某个文件中声明一个类类型的static变量，那么它将会被认为是类的static成员，而不是
只属于这个文件的变量

#8 =======================================================================================

使用using时同样遵循  ”就近原则“  和 ”离开作用域失效原则“。比如命名空间A 和 B，如果:

{
	using A;
	
	{
		using B;
		funcB();			//使用B::funcB
	}

	funcB();				//错误，因为已经离开了大括号，using B将失效
}

#9 =======================================================================================

多重继承  与  虚继承

多重继承的特性和使用和单继承没区别。按照单继承来使用即可。

多重继承可能会引入一个“菱形继承的问题”，这个问题其实并不算问题，因为它合情合理，即多个基类
拥有一个共同的基类，那么在构造的时候，由于构造的递归特性，就会出现共同基类出现两份实例的
情况，而且如果针对性修改，那么如果不在访问共同基类的时候先指定直接基类名称空间，则会出现
访问的二义性。
同时，菱形继承还会引入一个共同基类实例的内存开销。

不过，有些场景下，可能还确实需要两份共同基类。这样看，菱形继承 只是一个 “合理”的现象，而不是
问题，只要当我们不需要两份共同基类时，它才是“问题”。

解决菱形继承的方法：使用虚继承，即找到共同基类的继承处，在: 后面 和 继承权限限制 中间加上
virtual。

class A:public B,public C{

}

class B:virtual public D{

}

class C:virtual public D{

}

虚继承告诉编译器，在构造的时候，为其他类只创建一份自己，类似于类的static成员。

#10 =======================================================================================

正常的构造调用顺序：从最底层基类开始，直至最高层子类
正常的析构调用顺序：与上相反

包含虚继承的继承体系构造调用顺序与上略有不同，编译器会先轮询一边继承体系，如果存在虚继承，
那么构造时会优先构造虚继承的那个节点，接着按照正常顺序构造。析构也是如此，都是虚继承的节点
优先处理。












































