#1  =================================================================================================

头文件中不能使用using，因为头文件是以替换的形式在编译阶段被引入各个文件，如果使用了using，那么就可能
造成其他文件不经意间#include了使用了using的头文件，那么就造成了名称空间污染

#2  =================================================================================================

拷贝初始化 与 直接初始化

string s2(s1);  等价于  string s2 = s1;
string s3("123");  等价于  string s3 = "123";


拷贝初始化：1）使用等号初始化变量都是拷贝初始化。
            2）拷贝初始化，编译器把等号右侧的初始值拷贝到新创建的对象中。

直接初始化：不使用等号，则为直接初始化


如果初始化的值只有一个，则可使用拷贝初始化和直接初始化。
如果初始化的值有多个，那么推荐使用直接初始化，因为此时拷贝初始化需要创建一个临时的实例用来拷贝。
        student stu("xiaoming",18,"male");              //直接初始化为多个成员变量指定值
        student stu = student("xiaoming,18,"male"");    //这里就创建了临时的无名实例，用来完成拷贝中转

上面的拷贝中转相当于：
        student tmp("xiaoming",18,"male");
        student stu = tmp;

(!)尽量使用直接初始化，比如使用 QString str("123");而不是QString str = "123";


#3  =================================================================================================

string 和绝大多数 标准库 都定义了自己的自定义数据类型，这些类型可能会重名，所以需要通过域操作符来限制
比如 string::size_type ，file::size_type 。这些类型的存在旨在实现 “平台无关性”。

string.size 函数会返回 size_type ，这是一个无符号整形，所以在一个表达式中不要 对 size_type值 与 int类型
进行运算。

#4  =================================================================================================

标准库在设计时，都力求靠近内置类型，所以支持实例的直接赋值(这是由重载赋值运算符实现的)

如果自定义的类，且不继承标准库类，那么如果想实现实例的直接赋值，那么必须自己重载赋值运算符。

#5  =================================================================================================

字面值字符串，即常量字符串，可以对string实例使用 重载的 + 运算，但是不能对两个字面值字符串相加，可以
使用字面值先分别初始化成string实例，然后再相加

        注：这很好理解，由于c++是对c的包装，所以从底层的东西没有改变，字面值字符串依旧是存在于
            正文区(.text)

   有如下：
        string a = "hello" + "world";  //错误
        string a = "hello" + string("world");  //正确
        string a = "hello" + "world" + string("!");     //错误
        string a = string("hello") + "world" + "!";     //正确，因为运算是从左往右的，hello world会先形成新的string实例
        string a = "hello" + string(" ") + "world";     //正确

   小结：使用时，编译状态会检测错误，但是还是需要知道，+ 如果想表现为字符串拼接，那么就必须要求运算符两侧
         至少有一侧是 string实例，而不是字面值字符串。


   PS : 其实这是为了与c兼容，c++编译器不会吧字符串常量自动转换成string实例

#6  =================================================================================================

可以使用引用作为foreach的变量，进而达到改变字符串中指定字符的目的

for(auto &a:str){
    if(a == 'c'){
        a = 'C';
    }
}

#7  =================================================================================================

string 支持 [] 的重载动作，让string可以像数组一样按索引位置访问。

[]的引入，让string既具备了c++的字符串属性，也具备了c的字符数组属性，因此我们在对待string类型的时候，
需要同时以两种思维思考问题，这样便于找到最优解 ( 字符串的批量处理 / 字符数组的指定位置处理 )


#8  =================================================================================================

模板有 类模板 和 函数模板。

像vector这样的容器，就属于类模板。

模板本身不是某个类/某个函数，而是 编译器生成类/函数时，依照和参考的“说明”。编译器根据模板创建类/函数
的过程叫做“实例化”，使用模板时，需要指出应当把模板实例化哪种类/函数。

vector常用的模式，先定义一个空vector，再在需要的时候对其中的元素进行操作。
一般不会对vector进行初始化动作

#9  =================================================================================================

初始化时，使用花括号 {} 还是圆括号 () ,如何理解：
花括号：其中每一个元素都是声明类型的一个实例，可以理解为是多个实例化动作的集合
圆括号：其中每一个元素都是声明类型成员变量的一个值，可以理解为对一个实例赋值动作的集合

#10  =================================================================================================

循环语句中不应当出现对容器类的添加动作，以免循环条件控制不好，撑爆内存

像string一样，vector也有自己的size_type类型，使用时需要制定模板类型，比如vector<int>::size_type。

下标运算[]，仅仅是用来访问和替换，不能用来添加，这其实在c中也是违法的。

#11  =================================================================================================

可以把迭代器理解为指针，在使用上和指针有区别，指针存放地址，迭代器存放容器(支持迭代器的容器)的begin和end返回

可以使用auto来声明一个指向容器begin/end的迭代器，从而简化代码 。

#12  =================================================================================================

名词解释重温

复合类型：指有基本类型组成的类型
常量表达式：在“编译阶段”就能获得确切值，而且不会改变的表达式

如果某个表达式很复杂，比如包含宏，包含const数，包含static函数等等，我们很难直观判断这个表达式是不是常量表达式，
但是我们现在又想知道，那么就可以使用 constexpr 来修饰，如果表达式不是常量表达式(编译阶段就能确定值)，那么编译器报错
，可以理解constexpr 是一种“断言”(assert)。

int num = 42;				//num不是常量表达式，不用用作数组声明
constexpr int num = 42;		//num是常量表达式，可以用作数组声明
const int num = 42;			//（？？？）num在编译阶段就分配了内存空间，num是常量表达式


#13  =================================================================================================

可以定义指针数组，但是不能定义引用数组，引用定义时就要确认其宿主，所以无法批量定义。

#14  =================================================================================================

编译器在遇到数组时，会自动把数组转换成配套的指针

decltype修饰数组时，获得的就是数组类型，而不是指针类型，所以下面使用是错误的:

	int *p;
	int array[];
	
	decltype(array) array_1 = {1,2,3}; 
	array_1 = p;			//使用decltype定义的数组，不能获取指针值

	int array_2[] = {1,2,3};
	array_2 = p; 			//这样做可以


#15  =================================================================================================

针对数组类型，c++提供了两个函数用来模仿类的 迭代器 ：begin() , end() ，这两个函数在iterator头文件中。用法
如下：
	int a[] = {1,2,3};
	int *h_a = begin(a);
	int *t_a = end(a);

#16  =================================================================================================

string的c_str()函数返回一个char指针，这个指针指向string的值，可以用c里面的char数组/指针来获取string的值。


（！）但是，需要注意，这里是指针，1）也就意味着如果string实例被销毁，则这个指针变为野指针。
								  2）如果string的值改变，那么这个指针指向的内容也会被改变。
（！）所以，在混合使用string、char *、char []的时候，如果想要string的值，请自行分配内存，做memcpy备份，
	  否则，将存在dump的风险

	PS : 如果使用c_str()来给string进行赋值(拷贝)初始化则不用关心内存问题，因为string的赋值构造函数会自行
	拷贝备份，而不是使用指针
	  
#17  =================================================================================================

使用迭代器，foreach语句等这些新语法的理由之一：避免复杂的边界条件判断，然代码更易懂更安全。















