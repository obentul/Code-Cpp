函数多态 即 函数重载


函数重载是 以 函数参数列表数目 和 参数列表中参数类型的排列顺序 确定的。 


有如下几点需要注意：
1）double 和 double& ，在编译器看来是一样的，不会触发重载
	如果有func(double a)和func(double &a),这将是同一个函数

2）const 和 非const ， 会触发函数重载 ， 但是cosnt和非const互通
	有 func(const char* p) 和 func(char* p)
	当传 const char*的时候，会调用第一个，当传char *的时候会调用第二个，这看起来是正常逻辑。
	这里对应 --> "会触发重载"。

	但是，当只有第一个的时候，如果传char *，发现也能调用成功，这个时候是调用了第一个。同理反过来
	也成立，因为对于编译器来说，除非指定了两个(const和非const)，否则const和非const可以互相调用。
	这里对应 --> "cosnt和非const互通"

3）鉴于1）和2），编译器不区分 & 和 const，所以为了清晰起见，编译器遵循 “最佳匹配原则” ，即找到一模一样
   的，就最好了，如果找不到，那么看是不是有 “&原则 和 const原则”  能匹配的。





